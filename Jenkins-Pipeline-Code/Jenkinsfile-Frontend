pipeline {
    agent any
    tools {
       
        nodejs 'nodejs'
    }
    environment { // define environment variables here that is to be used throughout the jenkins here
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO01')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('cleaning Workspace') {
            steps {
                cleanWs()
            }

        }
        // stage ('checkout from Git') {
        //     steps {
        //         git credentialsId: 'git-cred', url: 'https://github.com/kartik695/mern-app-deployment-infra.git'
        //     }
        // }
        stage('Git Pull'){
                steps {
                     git(
                     branch: 'main', 
                     url: 'https://github.com/kartik695/mern-app-deployment-infra.git',
                     credentialsId: 'git-cred'
                     )
                
                 }
            }
        stage ('Sonarqube analysis'){

            steps{

                dir('Application-Code/frontend') {
                   withSonarQubeEnv('sonar-server') {
                    //  sh '''  $SCANNER_HOME/bin/sonar-scanner \
                    //  -Dsonar.projectName= frontend \
                    //  -Dsonar.projectkey= backend
                    //  '''
                     sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=frontend \
                        -Dsonar.projectKey=frontend '''
                }
            }
        }
        }
        stage('Quality Check') { // sonar-analysis has bad smell then abort pipeline
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
    //     stage('OWASP Dependency-Check Scan') {
    //         steps {
    //             dir('Application-Code/frontend') {
    //                 dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
    //                 dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
    //             }
    //         }

    // }
    stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt' // trivy fs here fs means file scan of currecy directory and output the result in trivyfs.txt
                }
            }

    }
    stage("Docker image  build"){ // go to frontend code and run command  docker build for building docker image
        steps {
            script {
                dir('Application-Code/frontend'){
                    sh 'docker system prune -f'
                    sh 'docker container prune -f'
                    sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                }
            }
        }
    }

    stage("ECR IMAGE PUSHING") {
       steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        // get authentication token aws ecr repo and give its output at the time of docker login password-stdin , ok stdin is used so that at time time of receiving password it will not reflect to command line interface
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
    }
    stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }

    stage('Git Checkout'){
                steps {
                    git(
                    branch: 'main', 
                    url: 'https://github.com/kartik695/mern-app-deployment-infra.git',
                    credentialsId: 'git-cred'
                    )
                }
            }
            
            
            
     stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "mern-app-deployment-infra"
                GIT_USER_NAME = "kartik695"
            }
        //     steps {
        //         dir('Kubernetes-Manifests-file/Frontend') {
        //             withCredentials([string(credentialsId: 'github', variable: 'git-cred')]) {
        //                 sh '''
        //                     git config user.email "arorakartik669@gmail.com"
        //                     git config user.name "kartik695"
        //                     BUILD_NUMBER=${BUILD_NUMBER}
        //                     echo $BUILD_NUMBER
        //                     imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
        //                     echo $imageTag
        //                     sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
        //                     git add deployment.yaml
        //                     git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
        //                     git push https://${git-cred}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
        //                 '''
        //             }
        //         }
        //     }
        // }
        
        
       steps {
    dir('Kubernetes-Manifests-file/Frontend') {
        withCredentials([usernamePassword(credentialsId: 'git-cred', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "arorakartik669@gmail.com"
                git config user.name "kartik695"
                BUILD_NUMBER=${BUILD_NUMBER}
                echo $BUILD_NUMBER
                imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                echo $imageTag
                sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                git add deployment.yaml
                git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                git push https://kartik695:${GITHUB_TOKEN}@github.com/kartik695/mern-app-deployment-infra.git main
            '''
        }
    }
}

}



    
    
}

}
